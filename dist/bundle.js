(() => {
	'use strict';
	const e = {
		filled: 'filled',
		'not-filled': 'not-filled',
		selected: 'selected'
	};
	class t {
		constructor(t, i, s, l, c) {
			(this.price = t),
				(this.state = i),
				(this.parent = s),
				(this.addSelectedPlace = l),
				(this.removeSelectedPlace = c),
				(this.id = Math.random().toString(16).slice(2)),
				(this.placeElement = document.createElement('div')),
				(this.init = () => {
					return (
						(t = this),
						(i = void 0),
						(l = function* () {
							(this.placeElement.className = `place ${
								(this.state && e[this.state]) || ''
							}`),
								this.placeElement.setAttribute(
									'data-id',
									this.id
								),
								yield this.parent.insertAdjacentElement(
									'afterbegin',
									this.placeElement
								),
								this.placeElement.addEventListener(
									'click',
									this.onClick
								);
						}),
						new ((s = void 0) || (s = Promise))(function (e, c) {
							function a(e) {
								try {
									o(l.next(e));
								} catch (e) {
									c(e);
								}
							}
							function n(e) {
								try {
									o(l.throw(e));
								} catch (e) {
									c(e);
								}
							}
							function o(t) {
								var i;
								t.done
									? e(t.value)
									: ((i = t.value),
									  i instanceof s
											? i
											: new s(function (e) {
													e(i);
											  })).then(a, n);
							}
							o((l = l.apply(t, i || [])).next());
						})
					);
					var t, i, s, l;
				}),
				(this.onClick = () => {
					switch (this.state) {
						case 'filled':
							alert('This place is occupied!');
							break;
						case 'not-filled':
							(this.state = 'selected'),
								this.addSelectedPlace({
									price: this.price,
									id: this.id
								}),
								this.render();
							break;
						case 'selected':
							(this.state = 'not-filled'),
								this.removeSelectedPlace(this.id),
								this.render();
					}
				}),
				(this.render = () => {
					this.placeElement.className = `place ${
						this.state ? this.state : ''
					}`;
				});
		}
	}
	const i = document.querySelector('#places-container'),
		s = document.querySelector('#amount-tickets'),
		l = document.querySelector('#price');
	i &&
		s &&
		l &&
		new (class {
			constructor(e, i, s, l, c) {
				(this.rows = e),
					(this.cols = i),
					(this.prices = s),
					(this.placesContainer = l),
					(this.totalInfoNodes = c),
					(this.totalPrice = 0),
					(this.totalCount = 0),
					(this.selectedPlaces = []),
					(this.renderHall = () => {
						for (let e = 1; e <= this.rows; e++) {
							const i = document.createElement('div');
							i.className = 'cinema-row';
							for (let s = 0; s < this.cols; s++) {
								let s = 100;
								this.prices.forEach((t) => {
									t.row === e && (s = t.price);
								}),
									new t(
										s,
										'not-filled',
										i,
										this.addSelectedPlace,
										this.removeSelectedPlace
									).init();
							}
							this.placesContainer.insertAdjacentElement(
								'beforebegin',
								i
							);
						}
					}),
					(this.renderTotalInfo = () => {
						(this.totalInfoNodes.totalCount.textContent =
							this.totalCount.toString()),
							(this.totalInfoNodes.totalPrice.textContent =
								this.totalPrice.toString());
					}),
					(this.reduceTotalValue = () => {
						if (this.selectedPlaces.length > 0) {
							let e = 0;
							this.selectedPlaces.forEach((t) => {
								e += t.price;
							}),
								(this.totalPrice = e);
						} else this.totalPrice = 0;
						this.totalCount = this.selectedPlaces.length;
					}),
					(this.addSelectedPlace = (e) => {
						this.selectedPlaces.push(e),
							this.reduceTotalValue(),
							this.renderTotalInfo();
					}),
					(this.removeSelectedPlace = (e) => {
						(this.selectedPlaces = this.selectedPlaces.filter(
							(t) => t.id !== e
						)),
							this.reduceTotalValue(),
							this.renderTotalInfo();
					});
			}
		})(
			3,
			5,
			[
				{ row: 1, price: 500 },
				{ row: 2, price: 400 },
				{ row: 3, price: 300 }
			],
			i,
			{ totalCount: s, totalPrice: l }
		).renderHall();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
